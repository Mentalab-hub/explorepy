# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _exploresdk
else:
    import _exploresdk

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _exploresdk.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _exploresdk.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _exploresdk.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _exploresdk.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _exploresdk.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _exploresdk.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _exploresdk.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _exploresdk.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _exploresdk.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _exploresdk.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _exploresdk.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _exploresdk.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _exploresdk.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _exploresdk.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _exploresdk.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _exploresdk.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _exploresdk.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _exploresdk:
_exploresdk.SwigPyIterator_swigregister(SwigPyIterator)

class BTSerialPortBinding(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _exploresdk.delete_BTSerialPortBinding

    @staticmethod
    def Create(address: "std::string", channelID: "int") -> "BTSerialPortBinding *":
        return _exploresdk.BTSerialPortBinding_Create(address, channelID)

    def Connect(self) -> "int":
        return _exploresdk.BTSerialPortBinding_Connect(self)

    def Close(self) -> "void":
        return _exploresdk.BTSerialPortBinding_Close(self)

    def Read(self, bt_buffer: "char *") -> "void":
        return _exploresdk.BTSerialPortBinding_Read(self, bt_buffer)

    def Write(self, write_buffer: "char const *") -> "void":
        return _exploresdk.BTSerialPortBinding_Write(self, write_buffer)

    def IsDataAvailable(self) -> "bool":
        return _exploresdk.BTSerialPortBinding_IsDataAvailable(self)

# Register BTSerialPortBinding in _exploresdk:
_exploresdk.BTSerialPortBinding_swigregister(BTSerialPortBinding)

def BTSerialPortBinding_Create(address: "std::string", channelID: "int") -> "BTSerialPortBinding *":
    return _exploresdk.BTSerialPortBinding_Create(address, channelID)

class vectordevice(collections.abc.MutableSequence):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _exploresdk.vectordevice_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _exploresdk.vectordevice___nonzero__(self)

    def __bool__(self) -> "bool":
        return _exploresdk.vectordevice___bool__(self)

    def __len__(self) -> "std::vector< device >::size_type":
        return _exploresdk.vectordevice___len__(self)

    def __getslice__(self, i: "std::vector< device >::difference_type", j: "std::vector< device >::difference_type") -> "std::vector< device,std::allocator< device > > *":
        return _exploresdk.vectordevice___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _exploresdk.vectordevice___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< device >::difference_type", j: "std::vector< device >::difference_type") -> "void":
        return _exploresdk.vectordevice___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _exploresdk.vectordevice___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< device >::value_type const &":
        return _exploresdk.vectordevice___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _exploresdk.vectordevice___setitem__(self, *args)

    def pop(self) -> "std::vector< device >::value_type":
        return _exploresdk.vectordevice_pop(self)

    def append(self, x: "device") -> "void":
        return _exploresdk.vectordevice_append(self, x)

    def empty(self) -> "bool":
        return _exploresdk.vectordevice_empty(self)

    def size(self) -> "std::vector< device >::size_type":
        return _exploresdk.vectordevice_size(self)

    def swap(self, v: "vectordevice") -> "void":
        return _exploresdk.vectordevice_swap(self, v)

    def begin(self) -> "std::vector< device >::iterator":
        return _exploresdk.vectordevice_begin(self)

    def end(self) -> "std::vector< device >::iterator":
        return _exploresdk.vectordevice_end(self)

    def rbegin(self) -> "std::vector< device >::reverse_iterator":
        return _exploresdk.vectordevice_rbegin(self)

    def rend(self) -> "std::vector< device >::reverse_iterator":
        return _exploresdk.vectordevice_rend(self)

    def clear(self) -> "void":
        return _exploresdk.vectordevice_clear(self)

    def get_allocator(self) -> "std::vector< device >::allocator_type":
        return _exploresdk.vectordevice_get_allocator(self)

    def pop_back(self) -> "void":
        return _exploresdk.vectordevice_pop_back(self)

    def erase(self, *args) -> "std::vector< device >::iterator":
        return _exploresdk.vectordevice_erase(self, *args)

    def __init__(self, *args):
        _exploresdk.vectordevice_swiginit(self, _exploresdk.new_vectordevice(*args))

    def push_back(self, x: "device") -> "void":
        return _exploresdk.vectordevice_push_back(self, x)

    def front(self) -> "std::vector< device >::value_type const &":
        return _exploresdk.vectordevice_front(self)

    def back(self) -> "std::vector< device >::value_type const &":
        return _exploresdk.vectordevice_back(self)

    def assign(self, n: "std::vector< device >::size_type", x: "device") -> "void":
        return _exploresdk.vectordevice_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _exploresdk.vectordevice_resize(self, *args)

    def insert(self, *args) -> "void":
        return _exploresdk.vectordevice_insert(self, *args)

    def reserve(self, n: "std::vector< device >::size_type") -> "void":
        return _exploresdk.vectordevice_reserve(self, n)

    def capacity(self) -> "std::vector< device >::size_type":
        return _exploresdk.vectordevice_capacity(self)
    __swig_destroy__ = _exploresdk.delete_vectordevice

# Register vectordevice in _exploresdk:
_exploresdk.vectordevice_swigregister(vectordevice)

class device(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    address = property(_exploresdk.device_address_get, _exploresdk.device_address_set)
    name = property(_exploresdk.device_name_get, _exploresdk.device_name_set)
    lastSeen = property(_exploresdk.device_lastSeen_get, _exploresdk.device_lastSeen_set)
    lastUsed = property(_exploresdk.device_lastUsed_get, _exploresdk.device_lastUsed_set)
    connected = property(_exploresdk.device_connected_get, _exploresdk.device_connected_set)
    remembered = property(_exploresdk.device_remembered_get, _exploresdk.device_remembered_set)
    authenticated = property(_exploresdk.device_authenticated_get, _exploresdk.device_authenticated_set)

    def __init__(self):
        _exploresdk.device_swiginit(self, _exploresdk.new_device())
    __swig_destroy__ = _exploresdk.delete_device

# Register device in _exploresdk:
_exploresdk.device_swigregister(device)

class ExploreSDK(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _exploresdk.delete_ExploreSDK

    @staticmethod
    def Create() -> "ExploreSDK *":
        return _exploresdk.ExploreSDK_Create()

    def PerformDeviceSearch(self, length: "int"=8) -> "std::vector< device,std::allocator< device > >":
        return _exploresdk.ExploreSDK_PerformDeviceSearch(self, length)

    def SdpSearch(self, address: "std::string") -> "int":
        return _exploresdk.ExploreSDK_SdpSearch(self, address)

# Register ExploreSDK in _exploresdk:
_exploresdk.ExploreSDK_swigregister(ExploreSDK)

def ExploreSDK_Create() -> "ExploreSDK *":
    return _exploresdk.ExploreSDK_Create()



