name: testing
on:
    pull_request:
        branches: [master, develop]
env:
    miniconda_linux: "https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh"
    miniconda_mac_arm: "https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh"
jobs:
    test:
        strategy:
            matrix:
                os: [ubuntu-latest, windows-latest]
                python: [3.12]
        runs-on: ${{ matrix.os }}
        timeout-minutes: 10
        steps:
            - name: Checkout source repository
              uses: actions/checkout@v2
              with:
                fetch-depth: 0
                clean: false

            - name: Checkout to current branch
              run: git checkout ${{ env.BRANCH }}

            - name: Install non-python dependencies on Ubuntu
              if: matrix.os == 'ubuntu-latest'
              run: |
                sudo apt-get update -y
                sudo apt-get install libbluetooth-dev -y
            - name: Set up Miniconda for Windows with ${{ matrix.python }}
              if: matrix.os == 'windows-latest'
              uses: s-weigand/setup-conda@v1
              with:
                  python-version: ${{ matrix.python }}
                  conda-channels: anaconda, conda-forge
            - name: Download Miniconda for macOS
              if: matrix.os == 'macos-latest'
              shell: bash
              run: |
                  mkdir -p ${{ github.workspace }}/miniconda3
                  curl "${{ env.miniconda_mac_arm }}" -o "${{ github.workspace }}/miniconda3/miniconda.sh"
            - name: Download Miniconda for Ubuntu
              if: matrix.os == 'ubuntu-latest'
              shell: bash
              run: |
                  mkdir -p ${{ github.workspace }}/miniconda3
                  curl "${{ env.miniconda_linux }}" -o "${{ github.workspace }}/miniconda3/miniconda.sh"
            - name: Set up Miniconda for ${{ matrix.os }} with ${{ matrix.python }}
              if: matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest'
              shell: bash
              run: |
                  bash ${{ github.workspace }}/miniconda3/miniconda.sh -b -u -p ${{ github.workspace }}/miniconda3
                  rm ${{ github.workspace }}/miniconda3/miniconda.sh
                  source ${{ github.workspace }}/miniconda3/bin/activate
                  conda init bash
                  conda config --prepend channels conda-forge
                  echo "${{ github.workspace }}/miniconda3/bin/" >> $GITHUB_PATH
            - name: Install liblsl from conda-forge
              run: |
                conda install -c conda-forge liblsl
                pip install -e .[test]
                python -m pytest --import-mode=append --html=pytest_report.html --self-contained-html
            -   name: Archive test results
                if: success() || failure()
                uses: actions/upload-artifact@v4
                with:
                    name: pytest-results-${{ matrix.os }}-${{ matrix.python }}
                    path: pytest_report.html
